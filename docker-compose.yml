version: '3.8'

services:
  # AG2 Core Service - Main multi-agent orchestrator
  ag2-core:
    build: 
      context: ./ag2-core
      dockerfile: Dockerfile
    container_name: re_ag2_core
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - LINKEDIN_ACCESS_TOKEN=${LINKEDIN_ACCESS_TOKEN}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://realestate:password@postgres:5432/realestate_agents
      - LANGFLOW_ENDPOINT=http://langflow:7860
    volumes:
      - ./data:/app/data
      - ./configs:/app/configs
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Langflow - Visual workflow designer
  langflow:
    image: langflow/langflow:latest
    container_name: re_langflow
    ports:
      - "7860:7860"
    environment:
      - LANGFLOW_DATABASE_URL=postgresql://langflow:password@postgres:5432/langflow
      - LANGFLOW_REDIS_URL=redis://redis:6379
      - LANGFLOW_SECRET_KEY=${LANGFLOW_SECRET_KEY}
      - LANGFLOW_SUPERUSER_USERNAME=admin
      - LANGFLOW_SUPERUSER_PASSWORD=${LANGFLOW_ADMIN_PASSWORD}
    volumes:
      - ./langflow-data:/app/data
      - ./langflow-workflows:/app/workflows
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - Main entry point for external requests
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: re_api_gateway
    ports:
      - "8000:8000"
    environment:
      - AG2_ENDPOINT=http://ag2-core:8001
      - LANGFLOW_ENDPOINT=http://langflow:7860
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://realestate:password@postgres:5432/realestate_agents
    depends_on:
      - ag2-core
      - langflow
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: re_postgres
    environment:
      - POSTGRES_DB=realestate_agents
      - POSTGRES_USER=realestate
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=langflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - agent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U realestate -d realestate_agents"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: re_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: re_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - agent-network

  # Background Task Worker (Celery)
  worker:
    build:
      context: ./ag2-core
      dockerfile: Dockerfile
    container_name: re_worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN}
      - INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}
      - LINKEDIN_ACCESS_TOKEN=${LINKEDIN_ACCESS_TOKEN}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://realestate:password@postgres:5432/realestate_agents
    volumes:
      - ./data:/app/data
      - ./configs:/app/configs
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network

  # Task Scheduler (Celery Beat)
  scheduler:
    build:
      context: ./ag2-core
      dockerfile: Dockerfile
    container_name: re_scheduler
    command: celery -A app.celery beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://realestate:password@postgres:5432/realestate_agents
    volumes:
      - ./data:/app/data
      - ./configs:/app/configs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - agent-network

  # Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: re_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agent-network

  # Monitoring Dashboard (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: re_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agent-network

  # Log Management (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: re_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - agent-network

  # Log Visualization (Kibana)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: re_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - agent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16